#! /usr/bin/env python3
#


import os
import pathlib
import platform
import subprocess
import sys
from typing import List


###################################################################
ENV = os.environ.copy()
ENV["LC_ALL"] = "C"


def check_run_output(cmd: List[str], shell: bool = False, ignore_stderr: bool = False) -> List[str]:
    p = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL if ignore_stderr else subprocess.STDOUT,
        shell=shell,
        env=ENV,
    )
    lines = [line.decode().rstrip() for line in p.stdout.readlines()]
    rc = p.wait()
    if rc != 0:
        print('"{}" returned {}. Output:'.format(" ".join(cmd), rc))
        for line in lines:
            print(line)
        assert False
    return lines


def check_run(cmd: List[str], shell: bool = False) -> None:
    p = subprocess.Popen(
        cmd,
        stdout=sys.stdout,
        stderr=sys.stderr,
        shell=shell,
        env=ENV,
    )
    rc = p.wait()
    if rc != 0:
        print('"{}" returned {}.'.format(" ".join(cmd), rc))
        assert False


###################################################################
def get_bazel_workspace_dir() -> str:
    cwd = os.getcwd()
    dir = pathlib.Path(cwd)
    while True:
        if (dir / "WORKSPACE").is_file() or (dir / "WORKSPACE.bazel").is_file():
            return str(dir.resolve())
        dir = dir.parent
        assert str(dir) not in ["/", ""], '"{}" is not under a Bazel workspace.'.format(cwd)


def get_bazel_execution_root_dir() -> str:
    cmd = [
        "bazel",
        "info",
        "execution_root",
    ]
    lines = check_run_output(cmd, ignore_stderr=True)
    return os.path.realpath(lines[0])


BAZEL_WORKSPACE_DIR = get_bazel_workspace_dir()
BAZEL_EXECUTION_ROOT_DIR = get_bazel_execution_root_dir()
ROOT_DIR = os.path.dirname(os.path.realpath(__file__))
BIN_DIR = os.path.realpath(".").replace(BAZEL_WORKSPACE_DIR, os.path.join(BAZEL_WORKSPACE_DIR, "bazel-bin"))
OUTPUT_FILE = os.path.realpath("lint_results.txt")


###################################################################
def get_clang_tidy() -> str:
    cmd = [
        "which",
        "clang-tidy",
    ]
    lines = check_run_output(cmd, ignore_stderr=True)
    return os.path.realpath(lines[0])


CLANG_TIDY = ENV["CLANG_TIDY"] if "CLANG_TIDY" in ENV else get_clang_tidy()
print("CLANG_TIDY={}".format(CLANG_TIDY))


###################################################################
def get_macos_sdk_root() -> str:
    cmd = [
        "xcrun",
        "--sdk",
        "macosx",
        "--show-sdk-path",
    ]
    lines = check_run_output(cmd, ignore_stderr=True)
    return os.path.realpath(lines[0])


if platform.system() == "Darwin":
    SDKROOT = ENV["SDKROOT"] if "SDKROOT" in ENV else get_macos_sdk_root()
    print("SDKROOT={}".format(SDKROOT))
else:
    SDKROOT = ""


###################################################################
def run_aspect() -> None:
    print("Running the aspect...")
    cmd = [
        "bazel",
        "build",
        "--color=yes",
        "--action_env=BAZEL_WORKSPACE_DIR={}".format(BAZEL_WORKSPACE_DIR),
        "--action_env=CLANG_TIDY={}".format(CLANG_TIDY),
        "--action_env=SDKROOT={}".format(SDKROOT),
        "--override_repository=bazeltoolset={}".format(ROOT_DIR),
        "--aspects=@bazeltoolset//:aspects.bzl%run_clang_tidy_aspect",
        "--output_groups=clang_tidy",
    ]
    if len(sys.argv) > 1:
        cmd.extend(sys.argv[1:])
    else:
        cmd.append("...")
    check_run(cmd)


def collect() -> None:
    files = sorted(pathlib.Path(BIN_DIR).glob("**/*.lint"))
    print("Collected {} lint files.".format(len(files)))
    lines = []

    for file in files:
        with open(file, "r") as f:
            _lines = f.readlines()
            if len(_lines) > 1:
                lines.extend(_lines)
                lines.append("\n")

    with open(OUTPUT_FILE, "w") as f:
        for line in lines:
            f.write(line)
    print('Generated "{}".'.format(OUTPUT_FILE))


###################################################################
if __name__ == "__main__":
    run_aspect()
    collect()
